"""
Test Enhanced Analysis Interface - Chi ti·∫øt ph√¢n t√≠ch quy tr√¨nh AI
"""

import requests
import json
import time


def test_enhanced_analysis():
    """Test giao di·ªán ph√¢n t√≠ch chi ti·∫øt m·ªõi"""
    base_url = "http://127.0.0.1:5000"

    print("üß† Testing Enhanced Analysis Interface")
    print("=" * 60)

    # Test cases v·ªõi c√°c lo·∫°i c√¢u h·ªèi kh√°c nhau ƒë·ªÉ xem ph√¢n t√≠ch
    test_cases = [
        {
            "customer_id": "1001",
            "message": "Ph√¢n t√≠ch m√≥n healthy c√≥ protein cao cho gia ƒë√¨nh 4 ng∆∞·ªùi",
            "location": "10.762622,106.660172",
            "name": "Healthy Family Analysis"
        },
        {
            "customer_id": "1002",
            "message": "G·ª£i √Ω m√≥n Vi·ªát truy·ªÅn th·ªëng v·ªõi ng√¢n s√°ch d∆∞·ªõi 200k",
            "location": "21.028511,105.804817",
            "name": "Vietnamese Traditional Analysis"
        },
        {
            "customer_id": "1003",
            "message": "Th·ª±c ƒë∆°n gi·∫£m c√¢n cho ng∆∞·ªùi ti·ªÉu ƒë∆∞·ªùng trong 1 tu·∫ßn",
            "location": None,
            "name": "Diet Plan Analysis"
        }
    ]

    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã Test Case {i}: {test_case['name']}")
        print(f"Customer: {test_case['customer_id']}")
        print(f"Message: {test_case['message']}")
        print(f"Location: {test_case['location'] or 'None'}")
        print("-" * 50)

        try:
            start_time = time.time()

            response = requests.post(
                f"{base_url}/api/enhanced-chat",
                json={
                    "customer_id": test_case["customer_id"],
                    "message": test_case["message"],
                    "location": test_case["location"]
                },
                headers={"Content-Type": "application/json"},
                timeout=30
            )

            end_time = time.time()
            response_time = end_time - start_time

            print(f"‚è±Ô∏è  Response time: {response_time:.2f}s")
            print(f"üìä Status code: {response.status_code}")

            if response.status_code == 200:
                data = response.json()
                print("‚úÖ SUCCESS!")
                print(f"ü§ñ Agent Type: {data.get('agent_type', 'unknown')}")

                # Show processing steps analysis
                steps = data.get('processing_steps', [])
                print(f"\nüîÑ Workflow Analysis ({len(steps)} steps):")
                for j, step in enumerate(steps, 1):
                    print(f"   {j}. {step['title']}")
                    print(f"      ‚îú‚îÄ Status: {step['status']}")
                    print(
                        f"      ‚îú‚îÄ Description: {step.get('description', 'N/A')}")
                    if 'id' in step:
                        print(f"      ‚îî‚îÄ ID: {step['id']}")
                    print()

                # Show detailed customer analysis
                customer_info = data.get('customer_info', {})
                if customer_info:
                    print("üë§ Customer Analysis:")
                    print(f"   ‚îú‚îÄ Name: {customer_info.get('name', 'N/A')}")
                    print(f"   ‚îú‚îÄ Age: {customer_info.get('age', 'N/A')}")
                    print(
                        f"   ‚îú‚îÄ Location: {customer_info.get('location', 'N/A')}")
                    print(
                        f"   ‚îú‚îÄ Preferences: {customer_info.get('preferences', [])}")
                    print(
                        f"   ‚îî‚îÄ Restrictions: {customer_info.get('restrictions', [])}")
                    print()

                # Show context analysis
                context = data.get('context_used', '')
                if context:
                    print(f"üîç Context Analysis:")
                    print(f"   ‚îî‚îÄ {context}")
                    print()

                # Show performance metrics
                metrics = data.get('performance_metrics', {})
                if metrics:
                    print("üìä Performance Metrics:")
                    for key, value in metrics.items():
                        print(f"   ‚îú‚îÄ {key}: {value}")
                    print()

                # Show response summary
                response_text = data.get('response', '')
                print(f"üìù AI Response Summary:")
                summary = response_text[:150] + \
                    "..." if len(response_text) > 150 else response_text
                print(f"   ‚îî‚îÄ {summary}")
                print()

            else:
                print(f"‚ùå FAILED! Status: {response.status_code}")
                print(f"Error: {response.text}")

        except Exception as e:
            print(f"‚ùå ERROR: {e}")

        if i < len(test_cases):
            print("\n" + "="*60)

    # Summary v√† h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    print("\nüéØ Enhanced Analysis Interface Guide:")
    print("=" * 60)
    print("1. Truy c·∫≠p: http://127.0.0.1:5000/agent-analysis")
    print("2. Ch·ªçn kh√°ch h√†ng t·ª´ dropdown")
    print("3. Nh·∫≠p c√¢u h·ªèi chi ti·∫øt ƒë·ªÉ ph√¢n t√≠ch")
    print("4. Xem workflow steps real-time")
    print("5. Click v√†o t·ª´ng step ƒë·ªÉ xem:")
    print("   ‚îú‚îÄ M√¥ t·∫£ chi ti·∫øt")
    print("   ‚îú‚îÄ K·ªπ thu·∫≠t s·ª≠ d·ª•ng")
    print("   ‚îú‚îÄ D·ªØ li·ªáu real-time")
    print("   ‚îî‚îÄ JSON analysis data")
    print("6. Theo d√µi performance metrics")
    print("7. Xem customer profile analysis")
    print()
    print("üî• Key Features:")
    print("‚îú‚îÄ Real-time workflow visualization")
    print("‚îú‚îÄ Expandable step-by-step analysis")
    print("‚îú‚îÄ JSON data viewer cho t·ª´ng step")
    print("‚îú‚îÄ Performance metrics dashboard")
    print("‚îú‚îÄ Customer profile integration")
    print("‚îú‚îÄ Context analysis display")
    print("‚îî‚îÄ Enhanced UI v·ªõi animations")
    print()
    print("üí° Tips:")
    print("‚îú‚îÄ S·ª≠ d·ª•ng c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ xem ph√¢n t√≠ch chi ti·∫øt")
    print("‚îú‚îÄ Click chevron icon ƒë·ªÉ m·ªü r·ªông t·ª´ng step")
    print("‚îú‚îÄ Xem JSON viewer ƒë·ªÉ hi·ªÉu d·ªØ li·ªáu raw")
    print("‚îî‚îÄ Theo d√µi processing time cho t·ª´ng step")


if __name__ == "__main__":
    test_enhanced_analysis()
